// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TopupBeneficiaries.DBContext;

#nullable disable

namespace TopupBeneficiaries.Migrations
{
    [DbContext(typeof(TopupBeneficiaryContext))]
    [Migration("20240607133757_DBInitial")]
    partial class DBInitial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.6");

            modelBuilder.Entity("TopupBeneficiaries.Entities.TopUpBeneficiary", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastUpdatedDateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("TopUpBeneficiaries");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDateTime = new DateTime(2024, 6, 7, 13, 37, 57, 548, DateTimeKind.Utc).AddTicks(4500),
                            IsActive = true,
                            IsDeleted = false,
                            LastUpdatedDateTime = new DateTime(2024, 6, 7, 13, 37, 57, 548, DateTimeKind.Utc).AddTicks(4500),
                            NickName = "Bene 1",
                            PhoneNumber = "1234567890",
                            UserId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            CreatedDateTime = new DateTime(2024, 6, 7, 13, 37, 57, 548, DateTimeKind.Utc).AddTicks(4500),
                            IsActive = true,
                            IsDeleted = false,
                            LastUpdatedDateTime = new DateTime(2024, 6, 7, 13, 37, 57, 548, DateTimeKind.Utc).AddTicks(4500),
                            NickName = "Bene 2",
                            PhoneNumber = "1234567891",
                            UserId = 1L
                        },
                        new
                        {
                            Id = 3L,
                            CreatedDateTime = new DateTime(2024, 6, 7, 13, 37, 57, 548, DateTimeKind.Utc).AddTicks(4500),
                            IsActive = true,
                            IsDeleted = false,
                            LastUpdatedDateTime = new DateTime(2024, 6, 7, 13, 37, 57, 548, DateTimeKind.Utc).AddTicks(4500),
                            NickName = "Bene 3",
                            PhoneNumber = "1234567892",
                            UserId = 1L
                        },
                        new
                        {
                            Id = 4L,
                            CreatedDateTime = new DateTime(2024, 6, 7, 13, 37, 57, 548, DateTimeKind.Utc).AddTicks(4500),
                            IsActive = true,
                            IsDeleted = false,
                            LastUpdatedDateTime = new DateTime(2024, 6, 7, 13, 37, 57, 548, DateTimeKind.Utc).AddTicks(4500),
                            NickName = "Bene 1",
                            PhoneNumber = "9876543210",
                            UserId = 2L
                        },
                        new
                        {
                            Id = 5L,
                            CreatedDateTime = new DateTime(2024, 6, 7, 13, 37, 57, 548, DateTimeKind.Utc).AddTicks(4510),
                            IsActive = true,
                            IsDeleted = false,
                            LastUpdatedDateTime = new DateTime(2024, 6, 7, 13, 37, 57, 548, DateTimeKind.Utc).AddTicks(4510),
                            NickName = "Bene 2",
                            PhoneNumber = "9876543211",
                            UserId = 2L
                        },
                        new
                        {
                            Id = 6L,
                            CreatedDateTime = new DateTime(2024, 6, 7, 13, 37, 57, 548, DateTimeKind.Utc).AddTicks(4510),
                            IsActive = true,
                            IsDeleted = false,
                            LastUpdatedDateTime = new DateTime(2024, 6, 7, 13, 37, 57, 548, DateTimeKind.Utc).AddTicks(4510),
                            NickName = "Bene 3",
                            PhoneNumber = "9876543212",
                            UserId = 2L
                        });
                });

            modelBuilder.Entity("TopupBeneficiaries.Entities.TopUpOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastUpdateDateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TopUpAmount")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("topUpOptions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDateTime = new DateTime(2024, 6, 7, 13, 37, 57, 548, DateTimeKind.Utc).AddTicks(4410),
                            IsDeleted = false,
                            LastUpdateDateTime = new DateTime(2024, 6, 7, 13, 37, 57, 548, DateTimeKind.Utc).AddTicks(4410),
                            Name = "5",
                            TopUpAmount = 5m
                        },
                        new
                        {
                            Id = 2,
                            CreatedDateTime = new DateTime(2024, 6, 7, 13, 37, 57, 548, DateTimeKind.Utc).AddTicks(4420),
                            IsDeleted = false,
                            LastUpdateDateTime = new DateTime(2024, 6, 7, 13, 37, 57, 548, DateTimeKind.Utc).AddTicks(4420),
                            Name = "10",
                            TopUpAmount = 10m
                        },
                        new
                        {
                            Id = 3,
                            CreatedDateTime = new DateTime(2024, 6, 7, 13, 37, 57, 548, DateTimeKind.Utc).AddTicks(4420),
                            IsDeleted = false,
                            LastUpdateDateTime = new DateTime(2024, 6, 7, 13, 37, 57, 548, DateTimeKind.Utc).AddTicks(4420),
                            Name = "20",
                            TopUpAmount = 20m
                        },
                        new
                        {
                            Id = 4,
                            CreatedDateTime = new DateTime(2024, 6, 7, 13, 37, 57, 548, DateTimeKind.Utc).AddTicks(4420),
                            IsDeleted = false,
                            LastUpdateDateTime = new DateTime(2024, 6, 7, 13, 37, 57, 548, DateTimeKind.Utc).AddTicks(4420),
                            Name = "30",
                            TopUpAmount = 30m
                        },
                        new
                        {
                            Id = 5,
                            CreatedDateTime = new DateTime(2024, 6, 7, 13, 37, 57, 548, DateTimeKind.Utc).AddTicks(4420),
                            IsDeleted = false,
                            LastUpdateDateTime = new DateTime(2024, 6, 7, 13, 37, 57, 548, DateTimeKind.Utc).AddTicks(4420),
                            Name = "50",
                            TopUpAmount = 50m
                        },
                        new
                        {
                            Id = 6,
                            CreatedDateTime = new DateTime(2024, 6, 7, 13, 37, 57, 548, DateTimeKind.Utc).AddTicks(4420),
                            IsDeleted = false,
                            LastUpdateDateTime = new DateTime(2024, 6, 7, 13, 37, 57, 548, DateTimeKind.Utc).AddTicks(4420),
                            Name = "75",
                            TopUpAmount = 75m
                        },
                        new
                        {
                            Id = 7,
                            CreatedDateTime = new DateTime(2024, 6, 7, 13, 37, 57, 548, DateTimeKind.Utc).AddTicks(4420),
                            IsDeleted = false,
                            LastUpdateDateTime = new DateTime(2024, 6, 7, 13, 37, 57, 548, DateTimeKind.Utc).AddTicks(4420),
                            Name = "100",
                            TopUpAmount = 100m
                        });
                });

            modelBuilder.Entity("TopupBeneficiaries.Entities.TopUpTransaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("TopUpBeneficiaryId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("TopUpChargeAmount")
                        .HasColumnType("TEXT");

                    b.Property<int>("TopUpOptionId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("TopupDateTime")
                        .HasColumnType("TEXT");

                    b.Property<long>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TopUpBeneficiaryId");

                    b.HasIndex("TopUpOptionId");

                    b.HasIndex("UserId");

                    b.ToTable("TopUpTransactions");
                });

            modelBuilder.Entity("TopupBeneficiaries.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("BalanceAmount")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsVerifiedUser")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastUpdatedDateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            BalanceAmount = 20000m,
                            CreatedDateTime = new DateTime(2024, 6, 7, 13, 37, 57, 548, DateTimeKind.Utc).AddTicks(4480),
                            IsDeleted = false,
                            IsVerifiedUser = false,
                            LastUpdatedDateTime = new DateTime(2024, 6, 7, 13, 37, 57, 548, DateTimeKind.Utc).AddTicks(4480),
                            PhoneNumber = "7863256215",
                            UserName = "Test User 1"
                        },
                        new
                        {
                            Id = 2L,
                            BalanceAmount = 4000m,
                            CreatedDateTime = new DateTime(2024, 6, 7, 13, 37, 57, 548, DateTimeKind.Utc).AddTicks(4480),
                            IsDeleted = false,
                            IsVerifiedUser = true,
                            LastUpdatedDateTime = new DateTime(2024, 6, 7, 13, 37, 57, 548, DateTimeKind.Utc).AddTicks(4480),
                            PhoneNumber = "9863256215",
                            UserName = "Test User 2"
                        });
                });

            modelBuilder.Entity("TopupBeneficiaries.Entities.TopUpBeneficiary", b =>
                {
                    b.HasOne("TopupBeneficiaries.Entities.User", "User")
                        .WithMany("TopUpBeneficiaries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TopupBeneficiaries.Entities.TopUpTransaction", b =>
                {
                    b.HasOne("TopupBeneficiaries.Entities.TopUpBeneficiary", "TopUpBeneficiary")
                        .WithMany("TopUpTransactions")
                        .HasForeignKey("TopUpBeneficiaryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TopupBeneficiaries.Entities.TopUpOption", "TopUpOption")
                        .WithMany("TopUpTransactions")
                        .HasForeignKey("TopUpOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TopupBeneficiaries.Entities.User", "User")
                        .WithMany("TopUpTransactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TopUpBeneficiary");

                    b.Navigation("TopUpOption");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TopupBeneficiaries.Entities.TopUpBeneficiary", b =>
                {
                    b.Navigation("TopUpTransactions");
                });

            modelBuilder.Entity("TopupBeneficiaries.Entities.TopUpOption", b =>
                {
                    b.Navigation("TopUpTransactions");
                });

            modelBuilder.Entity("TopupBeneficiaries.Entities.User", b =>
                {
                    b.Navigation("TopUpBeneficiaries");

                    b.Navigation("TopUpTransactions");
                });
#pragma warning restore 612, 618
        }
    }
}
